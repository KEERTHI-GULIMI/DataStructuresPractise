Question->Given two BSTs, return elements of merged BSTs in sorted form.
Approch-> two stacks for each trees 
2: Inversal traversal->compare peek elements and push into list




// User function Template for Java

/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}

*/



class Solution {
   
    public List<Integer> merge(Node root1, Node root2) {
        
        
        Stack<Node>s1=new Stack<>();
        Stack<Node>s2=new Stack<>();
        
        util(root1,s1);
        util(root2,s2);
        
        List<Integer> ans=new ArrayList<>();
        
        while(!s1.isEmpty() && !s2.isEmpty()){
            
            int s1Val=s1.peek().data;
            int s2Val=s2.peek().data;
            
            if(s1Val<s2Val){
                
                ans.add(s1Val);
                Node a=s1.pop();
                util(a.right,s1);
                
            }
            else if(s1Val>s2Val){
                
                  ans.add(s2Val);
                    Node a=s2.pop();
                util(a.right,s2);
                
            }else{
                ans.add(s1.peek().data);
                ans.add(s2.peek().data);
                 util(s1.pop().right,s1);
                 util(s2.pop().right,s2);
                
            }
            
        }
        
        while(!s1.isEmpty()){
            ans.add(s1.peek().data);
            Node a=s1.pop();
            util(a.right,s1);
        }
        
          
        while(!s2.isEmpty()){
            ans.add(s2.peek().data);
            Node a=s2.pop();
            util(a.right,s2);
        }
        
        return ans;
        
    }
    
    
    public void util(Node current,Stack<Node> s){
        
        while(current!=null){
            
            s.push(current);
            current=current.left;
        }
        
    }  
    
}
