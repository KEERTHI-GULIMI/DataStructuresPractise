
class Solution {
  
    public List<Integer> findMajority(List<Integer> nums) {
        HashMap<Integer,Integer>map=new HashMap<>();
        List<Integer> ans=new ArrayList<>();
        int n=nums.size();
        for(int i=0;i<n;i++){
            map.put(nums.get(i),map.getOrDefault(nums.get(i),0)+1);
        }
        for(int it: map.keySet()){
            if(map.get(it)>n/3){
                ans.add(it);
            }
        }
        
        if(ans.size()!=0){
           return  ans;
        }
        ans.add(-1);
        
        return ans;
    }
}

Approch2



class Solution {
   
    public List<Integer> findMajority(List<Integer> nums) {
     
      List<Integer>ans=new ArrayList<>();
     
      int c1=0;
      int c2=0;
      int e1=0;
      int e2=0;
      
      for(int num:nums){
          
         if(num==e1){
             c1++;
         }else  if(num==e2){
             c2++;
         }else if(c1==0){
             e1=num;
             c1++;
         }else if(c2==0){
             e2=num;
             c2++;
         }else{
             c1--;
             c2--;
         }
         
      }
      
      c1=0;
      c2=0;
      
      for(int num:nums){
          if(num==e1){
              c1++;
          }
          else if(num==e2){
             c2++;
          }
      }
      
       if(c1>nums.size()/3){
           ans.add(e1);
       }
       if(c2>nums.size()/3){
           ans.add(e2);
       }
       
       if(ans.isEmpty()){
           ans.add(-1);
       }
       
       
       return ans;
    }
}
